name: Snippet Analysis

on:
  pull_request:
    types: [opened, reopened]

jobs:
  analyze-snippets: 
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Bearer Token 
        run: |
          RESPONSE=$(curl -k -X POST -H "Authorization: token ${{ secrets.BLACK_DUCK_API_TOKEN }}" "https://${{ vars.HOSTNAME }}/api/tokens/authenticate")
          BEARER_TOKEN=$(echo "${RESPONSE}" | jq -r '.bearerToken')
          echo "BEARER_TOKEN=${BEARER_TOKEN}" >> $GITHUB_ENV  
      
      - name: Checkout code
        uses: actions/checkout@v3  
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}
      
      - name: Get list of changed files 
        run: |
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
          echo "Requesting URL: $URL"
          RESPONSE=$(curl -s -X GET -G -H "Authorization: token ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}" $URL)
          echo "API Response: $RESPONSE"
          FILES=$(echo "$RESPONSE" | jq -r '.[] | .filename' | tr '\n' ' ')
          echo "FILES=${FILES}" >> $GITHUB_ENV
        
      - name: Query for snippet matches
        run: |
          rm -rf .snippet-licenses
          mkdir .snippet-licenses
          FILEPATHS="${{ env.FILES }}"
          
          count=1                          
          for filepath in $FILEPATHS; do       
            filename=$(echo "$filepath" | tr '/' '_')
            filename="${filename%.*}-snippet-analysys.json"
            echo "File path $filepath , file name $filename"
            RES=$(curl -k --location --request POST "https://${{ vars.HOSTNAME }}/api/snippet-matching" --header "Authorization: Bearer ${BEARER_TOKEN}" --header "Content-Type: text/plain" --data-binary "@$filepath")
            echo "$RES" | jq '.' > ".snippet-licenses/$filename"
            if [ $count -eq 10 ]
            then
              break
            fi
            ((count++))
          done
       
      - name: Commit and push snippet analysis results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "Adding license findings via GitHub Actions"
          git push || echo "No Changes to commit"

      - name: Comment on PR with snippet analysis results for multiple matches
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/$PR_NUMBER/comments"
          COMMIT_ID="${{ github.event.pull_request.head.sha }}"
          
          for jsonfile in .snippet-licenses/*.json; do
            # Get the total number of matches (assuming PERMISSIVE licensing; adjust as needed)
            TOTAL_MATCHES=$(jq '[.snippetMatches.PERMISSIVE[]] | length' "$jsonfile")
            for ((i=0; i<TOTAL_MATCHES; i++)); do
              # Extract relevant information for each match
              PROJECT_NAME=$(jq -r ".snippetMatches.PERMISSIVE[$i].projectName" "$jsonfile")
              FILE_PATH=$(jq -r ".snippetMatches.PERMISSIVE[$i].matchedFilePath" "$jsonfile")
              START_LINE=$(jq -r ".snippetMatches.PERMISSIVE[$i].regions.sourceStartLines[0]" "$jsonfile")
              END_LINE=$(jq -r ".snippetMatches.PERMISSIVE[$i].regions.sourceEndLines[0]" "$jsonfile")
              LICENSE_NAME=$(jq -r ".snippetMatches.PERMISSIVE[$i].licenseDefinition.name" "$jsonfile")
              
              # Construct the comment text
              COMMENT_BODY="Detected license: $LICENSE_NAME in project: $PROJECT_NAME. File: $FILE_PATH, Lines: $START_LINE-$END_LINE."
              
              # JSON payload for GitHub API
              JSON_PAYLOAD=$(jq -n \
                --arg body "$COMMENT_BODY" \
                --arg commit_id "$COMMIT_ID" \
                --arg path "$FILE_PATH" \
                --arg start_line "$START_LINE" \
                --arg line "$END_LINE" \
                '{body: $body, commit_id: $commit_id, path: $path, start_line: $start_line | tonumber, line: $line | tonumber}')
              
              # Use GitHub API to create a review comment on the PR
              curl -s \
                   -X POST \
                   -H "Authorization: token ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}" \
                   -H "Accept: application/vnd.github.v3+json" \
                   -d "$JSON_PAYLOAD" \
                   $API_URL
            done
          done
      
