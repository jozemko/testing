name: Snippet Analysis

on:
  pull_request:
    types: [opened, reopened]

jobs:
  analyze-snippets: 
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Fetch Bearer Token 
        run: |
          RESPONSE=$(curl -k -X POST -H "Authorization: token ${{ secrets.BLACK_DUCK_API_TOKEN }}" "https://${{ vars.HOSTNAME }}/api/tokens/authenticate")
          BEARER_TOKEN=$(echo "${RESPONSE}" | jq -r '.bearerToken')
          echo "BEARER_TOKEN=${BEARER_TOKEN}" >> $GITHUB_ENV  
      
      - name: Checkout code
        uses: actions/checkout@v3  
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}
      
      - name: Get list of changed files 
        run: |
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
          echo "Requesting URL: $URL"
          RESPONSE=$(curl -s -X GET -G -H "Authorization: token ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}" $URL)
          echo "API Response: $RESPONSE"
          FILES=$(echo "$RESPONSE" | jq -r '.[] | .filename' | tr '\n' ' ')
          echo "FILES=${FILES}" >> $GITHUB_ENV
        
      - name: Query for snippet matches
        run: |
          rm -rf .snippet-licenses
          mkdir .snippet-licenses
          FILEPATHS="${{ env.FILES }}"
          
          count=1                          
          for filepath in $FILEPATHS; do       
            filename=$(echo "$filepath" | tr '/' '_')
            filename="${filename%.*}-snippet-analysis.json"
            echo "File path: $filepath, File name: $filename"
            RES=$(curl -k --location --request POST "https://${{ vars.HOSTNAME }}/api/snippet-matching" --header "Authorization: Bearer ${BEARER_TOKEN}" --header "Content-Type: text/plain" --data-binary "@$filepath")
            echo "$RES" | jq '.' > ".snippet-licenses/$filename"
            if [ $count -eq 10 ]
            then
              break
            fi
            ((count++))
          done
          
      - name: Generate SARIF Report
        run: |
          # Create a SARIF template
          SARIF_TEMPLATE='{
            "$schema": "http://json.schemastore.org/sarif-2.1.0",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Snippet License Analyzer",
                    "version": "1.0",
                    "informationUri": "https://example.com/tool-info",
                    "rules": []
                  }
                },
                "results": []
              }
            ]
          }'
      
          # Function to generate a SARIF result entry for each snippet match
          generate_sarif_result() {
            jq -c --arg filepath "$1" --argjson regions "$2" --arg licenseDisplayName "$3" '.runs[0].results += [{
              "ruleId": "license-match",
              "level": "warning",
              "message": {
                "text": "License match found: \($licenseDisplayName)"
              },
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": $filepath,
                      "uriBaseId": "%SRCROOT%"
                    },
                    "region": $regions
                  }
                }
              ]
            }]'
          }
      
          # Initialize SARIF with the template
          SARIF_CONTENT=$(echo "$SARIF_TEMPLATE")
      
          # Loop through each JSON file in the .snippet-licenses directory
          for FILE in .snippet-licenses/*.json; do
            # Extract necessary data and update SARIF_CONTENT for each file
            SARIF_CONTENT=$(jq -s --argfile file "$FILE" --arg filepath "$FILE" \
              'reduce ($file[] | .snippetMatches[][]) as $item (
                .;
                generate_sarif_result($filepath, {startLine: $item.regions.sourceStartLines[0], endLine: $item.regions.sourceEndLines[0]}, $item.licenseDefinition.licenseDisplayName)
              )' <<<"$SARIF_CONTENT")
          done
      
          # Output the final SARIF content to a file
          echo "$SARIF_CONTENT" > snippet-analysis.sarif
 
      - name: Generate PR comment with findings
        id: comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.WORKFLOW_GIT_ACCESS_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const folderPath = '.snippet-licenses';
            
            let commentBody = '## Snippet License Analysis Results\n\n';
            fs.readdirSync(folderPath).forEach(file => {
              let rawdata = fs.readFileSync(path.join(folderPath, file));
              let analysisResult = JSON.parse(rawdata);
              const filePath = file.replace(/_/g, '/').replace(/-snippet-analysis.json$/, '');
              commentBody += `### File: ${filePath}\n`;
              if (analysisResult.snippetMatches && Object.keys(analysisResult.snippetMatches).length > 0) {
                Object.keys(analysisResult.snippetMatches).forEach(licenseType => {
                  commentBody += `- **License Type: ${licenseType}**\n`;
                  analysisResult.snippetMatches[licenseType].forEach(match => {
                    const projectName = match.projectName ? match.projectName : "N/A";
                    const releaseVersion = match.releaseVersion ? match.releaseVersion : "N/A";
                    const licenseName = match.licenseDefinition && match.licenseDefinition.licenseDisplayName ? match.licenseDefinition.licenseDisplayName : "Unknown License";
                    const lines = `L${match.regions.sourceStartLines[0]}-L${match.regions.sourceEndLines[0]}`;
                    const fileUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${context.sha}/${filePath}#${lines}`;
                    commentBody += `  - **License Name: ${licenseName}**\n    - Path: [${filePath}#${lines}](${fileUrl}), Project: ${projectName}, Version: ${releaseVersion}\n`;
                  });
                });
              } else {
                commentBody += 'No significant matches found.\n';
              }
              commentBody += '\n';
            });;
      
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const comment = await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: commentBody
            });


      
      - name: Commit and push snippet analysis results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "Adding license findings via GitHub Actions"
          git push || echo "No changes to commit"
